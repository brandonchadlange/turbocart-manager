generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String   @id @default(cuid())
  sessionId String
  firstName String
  lastName  String
  grade     String
  Basket    Basket[]
  Session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId], map: "Student_sessionId_fkey")
}

model Order {
  id                String       @id @default(cuid())
  createdAt         DateTime
  merchantId        String
  paymentId         String
  quantity          Int          @default(0)
  totalInCents      Int          @default(0)
  students          Int          @default(0)
  customerEmail     String       @default("")
  customerFirstName String       @default("")
  customerLastName  String       @default("")
  completeBatches   Int          @default(0)
  totalBatches      Int          @default(0)
  serviceFeeInCents Int          @default(0)
  Merchant          Merchant     @relation(fields: [merchantId], references: [id])
  OrderBatch        OrderBatch[]
  OrderItem         OrderItem[]

  @@index([merchantId], map: "Order_merchantId_fkey")
}

model OrderItem {
  id                  String     @id @default(cuid())
  orderId             String
  productId           String
  quantity            Int
  pricePerItemInCents Int
  orderBatchId        String
  packed              Boolean    @default(false)
  OrderBatch          OrderBatch @relation(fields: [orderBatchId], references: [id])
  order               Order      @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([orderBatchId], map: "OrderItem_orderBatchId_fkey")
}

model Basket {
  id        String  @id
  sessionId String
  productId String
  studentId String
  menuId    String
  dateId    String
  quantity  Int
  Session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([sessionId], map: "Basket_sessionId_fkey")
  @@index([studentId], map: "Basket_studentId_fkey")
}

model Session {
  id         String    @id
  merchantId String
  createdAt  DateTime
  Basket     Basket[]
  Student    Student[]
}

model Merchant {
  id             String          @id
  name           String
  yocoPublicKey  String
  yocoPrivateKey String
  clerkId        String          @default("")
  Order          Order[]
  PaymentMethod  PaymentMethod[]
}

model OrderBatch {
  id               String      @id
  orderId          String
  dateId           String
  menuId           String
  studentFirstName String
  studentLastName  String
  studentGrade     String
  fulfilled        Boolean     @default(false)
  Order            Order       @relation(fields: [orderId], references: [id])
  OrderItem        OrderItem[]

  @@index([orderId], map: "OrderBatch_orderId_fkey")
}

model Product {
  id       String    @id @default(cuid())
  name     String
  variants Variant[]
}

model Attribute {
  id                String             @id @default(cuid())
  name              String
  values            AttributeValue[]
  variantAttributes VariantAttribute[]
}

model AttributeValue {
  id                String             @id @default(cuid())
  attributeId       String
  value             String
  attribute         Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantAttributes VariantAttribute[]

  @@index([attributeId], map: "AttributeValue_attributeId_fkey")
}

model Variant {
  id                String             @id @default(cuid())
  productId         String
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantAttributes VariantAttribute[]

  @@index([productId], map: "Variant_productId_fkey")
}

model VariantAttribute {
  variantId        String
  attributeId      String
  attributeValueId String
  attribute        Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  variant          Variant        @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([variantId, attributeId])
  @@index([attributeId], map: "VariantAttribute_attributeId_fkey")
  @@index([attributeValueId], map: "VariantAttribute_attributeValueId_fkey")
}

model HierachyLevel {
  id    String         @id @default(cuid())
  name  String
  level Int
  nodes HierachyNode[]
}

model HierachyNode {
  id              String              @id @default(cuid())
  name            String
  hierachyLevelId String
  hierachyLevel   HierachyLevel       @relation(fields: [hierachyLevelId], references: [id])
  childNodes      HierachyStructure[] @relation("childNodes")
  parentNodes     HierachyStructure[] @relation("parentNodes")

  @@index([hierachyLevelId], map: "HierachyNode_hierachyLevelId_fkey")
}

model HierachyStructure {
  parentId String
  childId  String
  child    HierachyNode @relation("childNodes", fields: [childId], references: [id])
  parent   HierachyNode @relation("parentNodes", fields: [parentId], references: [id])

  @@id([parentId, childId])
  @@index([childId], map: "HierachyStructure_childId_fkey")
}

model PaymentMethod {
  id            String   @id
  merchantId    String
  name          String
  description   String
  provider      String
  enabled       Boolean
  configuration String
  Merchant      Merchant @relation(fields: [merchantId], references: [id])

  @@index([merchantId], map: "PaymentMethod_merchantId_fkey")
}
